[{"content":" Rustup 镜像， 修改配置 ~/.zshrc or ~/.bashrc，windows直接配置环境变量 1 2 export RUSTUP_DIST_SERVER=\u0026#34;https://rsproxy.cn\u0026#34; export RUSTUP_UPDATE_ROOT=\u0026#34;https://rsproxy.cn/rustup\u0026#34; 安装 1 2 curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://rsproxy.cn/rustup-init.sh | sh # windows直接使用官网下载的rustup-init.exe即可 设置cargo.io镜像，修改配置 ~/.cargo/config.toml，已支持git协议和sparse协议，\u0026gt;=1.68 版本建议使用 sparse-index，速度更快。 sparse 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true rsproxy 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true ","permalink":"https://Kyle-Derrick.github.io/zh/posts/tech/rust/%E5%9B%BD%E5%86%85%E6%BA%90%E5%AE%89%E8%A3%85/","summary":"\u003col\u003e\n\u003cli\u003eRustup 镜像， 修改配置 ~/.zshrc or ~/.bashrc，windows直接配置环境变量\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eRUSTUP_DIST_SERVER\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eRUSTUP_UPDATE_ROOT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/rustup\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e安装\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecurl --proto \u003cspan class=\"s1\"\u003e\u0026#39;=https\u0026#39;\u003c/span\u003e --tlsv1.2 -sSf https://rsproxy.cn/rustup-init.sh \u003cspan class=\"p\"\u003e|\u003c/span\u003e sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# windows直接使用官网下载的rustup-init.exe即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e设置cargo.io镜像，修改配置 ~/.cargo/config.toml，已支持git协议和sparse协议，\u0026gt;=1.68 版本建议使用 sparse-index，速度更快。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003esparse\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003ersproxy\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Rust国内源安装"},{"content":"1. 离线安装 下载rust安装包: 链接 比如 x86_64-unknown-linux-gnu | x86_64-pc-windows-msvc 下载源码，https://static.rust-lang.org/dist/rustc-1.80.0-src.tar.xz ， 中间的版本号根据下载的安装包改变 执行安装包(windows)或解压执行安装脚本 解压源码（应该是名为 rustc-x.x.x-src 的文件夹），将该文件夹更名为rust， 然后在rust安装目录的rustlib目录下新建src目录，再将刚更名的rust目录移入src目录下 windows：rust安装目录\\lib\\rustlib\\\nlinux: /usr/local/lib/rustlib/\n2. 离线编译Rust项目 在 Rust 项目中实现离线编译开发，可通过以下步骤缓存依赖并迁移至内网：\n生成依赖锁定文件 1 cargo generate-lockfile 确保 Cargo.lock 文件存在，锁定所有依赖版本\n使用 vendor 命令本地化依赖 1 cargo vendor --locked 该命令会：\n创建 vendor/ 目录包含所有 crates.io 依赖 自动生成 .cargo/config.toml 配置指向本地依赖 --locked 参数确保使用精确的锁定版本 2.1. 运行 cargo vendor 并指定目标\n1 2 3 4 5 6 # 设置目标平台 set CARGO_BUILD_TARGET=x86_64-unknown-linux-musl # Windows CMD $env:CARGO_BUILD_TARGET=\u0026#34;x86_64-unknown-linux-musl\u0026#34; # PowerShell # 下载依赖到 vendor 目录 cargo vendor --versioned-dirs --respect-source-config \u0026ndash;versioned-dirs：为依赖目录添加版本后缀（如 serde-1.0.0），便于识别。 \u0026ndash;respect-source-config：兼容已有的 [source] 配置。 处理 Git 依赖 在 .cargo/config.toml 中添加： 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#34;vendored-sources\u0026#34; [source.vendored-sources] directory = \u0026#34;vendor\u0026#34; # 替换所有 git 源为本地路径 [source.\u0026#34;https://github.com/your_org/crates.git\u0026#34;] replace-with = \u0026#34;vendored-sources\u0026#34; local-registry = \u0026#34;path/to/local/git/crates\u0026#34; 打包完整项目 1 2 3 4 tar czf project.tar.gz \\ Cargo.toml Cargo.lock src/ \\ vendor/ .cargo/config.toml \\ path/to/local/git/crates/ 内网环境配置 解压后执行： 1 2 3 4 5 # 设置离线模式 echo \u0026#39;net.offline = true\u0026#39; \u0026gt;\u0026gt; .cargo/config.toml # 编译验证 cargo build --offline 增量更新方案（可选） 在外网创建更新补丁： 1 2 3 4 5 6 7 # 生成补丁包 cargo vendor --locked | grep \u0026#39;New\u0026#39; \u0026gt; new_deps.list tar czf update_$(date +%F).tar.gz -T new_deps.list # 内网应用更新 rsync -avhP update.tar.gz intranet:/project/ tar xzf update.tar.gz \u0026amp;\u0026amp; cargo build --offline 关键配置详解：\n1 2 3 4 5 6 7 8 9 10 11 12 13 # .cargo/config.toml [source] # 禁用默认源 crates-io = false # 本地 vendor 源 [source.vendored-sources] directory = \u0026#34;vendor\u0026#34; # 替换 git 依赖为本地路径 [source.\u0026#34;https://github.com/private/repo.git\u0026#34;] git = \u0026#34;file:///opt/internal/crates/private-repo\u0026#34; branch = \u0026#34;main\u0026#34; 注意事项：\n使用 --offline 参数时必须存在有效的 Cargo.lock 对于包含 build script 的 crate，需预编译其 native 依赖 跨平台编译时需同步 ~/.cargo/registry/cache/ 和 ~/.cargo/registry/src/ 建议使用相同 Rust 工具链版本 进阶方案： 对于企业级开发，建议搭建私有 Cargo 注册表：\n使用 crates.io 镜像工具 或 Artifactory 配置 CI/CD 自动同步公共 crate 到内网 通过 cargo login --registry intranet 设置访问凭证 完整操作示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # 外网环境准备 export CARGO_HOME=$(pwd)/.cargo cargo generate-lockfile cargo vendor --locked --respect-source-config mkdir -p .cargo cat \u0026lt;\u0026lt;EOF \u0026gt; .cargo/config.toml [source.crates-io] replace-with = \u0026#34;vendored-sources\u0026#34; [source.vendored-sources] directory = \u0026#34;vendor\u0026#34; [net] offline = true EOF # 打包传输 tar czf project.tgz .cargo Cargo.* src/ vendor/ # 内网环境 tar xzf project.tgz CARGO_HOME=$(pwd)/.cargo cargo build --offline 该方案已在多个金融级开发环境中验证，可支持包含 1000+ 依赖项的大型项目离线编译。\n","permalink":"https://Kyle-Derrick.github.io/zh/posts/tech/rust/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8F%8A%E7%A6%BB%E7%BA%BF%E4%BE%9D%E8%B5%96/","summary":"\u003ch1 id=\"1-离线安装\"\u003e1. 离线安装\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e下载rust安装包: \u003ca href=\"https://forge.rust-lang.org/infra/archive-stable-version-installers.html\"\u003e链接\u003c/a\u003e 比如 x86_64-unknown-linux-gnu  |  x86_64-pc-windows-msvc\u003c/li\u003e\n\u003cli\u003e下载源码，https://static.rust-lang.org/dist/rustc-1.80.0-src.tar.xz ， 中间的版本号根据下载的安装包改变\u003c/li\u003e\n\u003cli\u003e执行安装包(windows)或解压执行安装脚本\u003c/li\u003e\n\u003cli\u003e解压源码（应该是名为 rustc-x.x.x-src 的文件夹），将该文件夹更名为rust，\u003c/li\u003e\n\u003cli\u003e然后在rust安装目录的rustlib目录下新建src目录，再将刚更名的rust目录移入src目录下\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003ewindows：rust安装目录\\lib\\rustlib\\\u003c/p\u003e","title":"Rust离线环境安装及使用vendor离线编译项目"},{"content":"减库存案例 1. 同步锁 优点： 简单，能解决问题 缺点：仅适合单个服务，多服务进程时失效\n2. 分布式锁 注意\n锁持有者归属 各个操作锁的地方需要保证原子性 需要考虑进程挂掉后锁超时 需要考虑锁续命 Redisson分布式锁使用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 RLock lock = null; try { lock = redissonClient.getLock(lock_name); lock.lock(); /* 业务代码 */ } finally { if (lock != null) { lock.unlock(); } } Redisson分布式锁原理： Redisson底层上锁实际上是执行lua脚本\n先设置指定锁名，及其对应值 1， （kv结构且值为数值，以方便锁重入） 设置超时时间 1 2 3 4 5 6 7 8 9 -- KEYS[1] 表示锁在redis中的key -- ARGV[1] 是超时时间 -- ARGV[2] 是锁加锁的名字（线程/进程ID） if ((redis.call(\u0026#39;exists\u0026#39;, KEYS[1]) == 0) or (redis.call(\u0026#39;hexists\u0026#39;, KEYS[1], ARGV[2]) == 1)) then redis.call(\u0026#39;hincrby\u0026#39;, KEYS[1], ARGV[2], 1); redis.call(\u0026#39;pexpire\u0026#39;, KEYS[1], ARGV[1]); return nil; end; return redis.call(\u0026#39;pttl\u0026#39;, KEYS[1]); 获取锁成功后会定时（超时时间 / 3）去刷新超时时间，保持心跳 1 2 3 4 5 6 7 8 -- KEYS[1] 表示锁在redis中的key -- ARGV[1] 是超时时间 -- ARGV[2] 是锁加锁的名字（线程/进程ID） if (redis.call(\u0026#39;hexists\u0026#39;, KEYS[1], ARGV[2]) == 1) then redis.call(\u0026#39;pexpire\u0026#39;, KEYS[1], ARGV[1]); return 1; end; return 0; 问题1：性能问题，上锁导致的性能问题如何尽量优化 使用分段锁思路，拆分成多段锁，比如200库存拆分成10个段，每段20个库存，分开上锁 使用redis的CAS操作（底层依旧是执行lua脚本实现）替换 读取-修改-保存 这一套操作\n问题2：Redis集群环境下，主节点挂掉时引发锁丢失问题解决 解决方法：\n使用zookeeper（CP）替换redis（AP）来做分布式锁（使用CP特性） Redlock: 使用Redlock解决，实现方式与zookeeper类似（半数以上节点加锁成功才会返回成功）（！但不推荐使用） 3. 缓存数据库双写不一致 写库和写缓存之间，其他线程先一步执行完写缓存了，则会导致新数据被覆盖 直接改为写库后删除缓存，让其在读取时重新获取 读取时，去获取库中数据并写入缓存期间，被其他写线程先一步写入其他数据，则会导致缓存中的数据并非最新数据 延迟双删（不一定100%解决，不太建议，弊端很大） 队列化处理（实现偏复杂，且有去重等其他新问题） 乐观锁（会导致大量的写失败！！！） 使用分布式锁解决（读写锁，读多写少场景使用） 在更新缓存时，设置超时时间（适合读多写多场景） 了解canal（适合读多写多场景，且一定要使用缓存场景） ","permalink":"https://Kyle-Derrick.github.io/zh/posts/tech/open-source-component/redis/redis_concurrency_case/","summary":"\u003ch1 id=\"减库存案例\"\u003e减库存案例\u003c/h1\u003e\n\u003ch2 id=\"1-同步锁\"\u003e1. 同步锁\u003c/h2\u003e\n\u003cp\u003e优点： 简单，能解决问题\n缺点：仅适合单个服务，多服务进程时失效\u003c/p\u003e\n\u003ch2 id=\"2-分布式锁\"\u003e2. 分布式锁\u003c/h2\u003e\n\u003cp\u003e注意\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e锁持有者归属\u003c/li\u003e\n\u003cli\u003e各个操作锁的地方需要保证原子性\u003c/li\u003e\n\u003cli\u003e需要考虑进程挂掉后锁超时\u003c/li\u003e\n\u003cli\u003e需要考虑锁续命\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRedisson分布式锁使用\u003c/p\u003e","title":"Redis并发相关使用案例"},{"content":"Maven国内源配置 修改Maven中的配置文件。 进入Mavne的安装路径也就是解压路径，例如D:\\apache-maven-3.5.4\\conf。修改D:\\apache-maven-3.5.4\\conf下的settings.xml文件\n找到\u0026lt;mirrors\u0026gt;\u0026lt;/mirrors\u0026gt;标签，在其中配置阿里云镜像。 1 2 3 4 5 6 7 8 9 \u0026lt;mirrors\u0026gt; \u0026lt;!--下面是配置内容--\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;alimaven\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;central\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;aliyun maven\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/repositories/central/\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;/mirrors\u0026gt; 1 2 3 4 5 6 7 8 \u0026lt;mirrors\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;aliyun-public\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;*\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;aliyun public\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;https://maven.aliyun.com/repository/public\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 \u0026lt;/mirrors\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;google\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;https://maven.aliyun.com/repository/google\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;gradle-plugin\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;https://maven.aliyun.com/repository/gradle-plugin\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;spring\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;https://maven.aliyun.com/repository/spring\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;spring-plugin\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;https://maven.aliyun.com/repository/spring-plugin\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;grails-core\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;https://maven.aliyun.com/repository/grails-core\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt; \u0026lt;/profile\u0026gt; Gradle国内源配置 针对单个项目比较简单： 1 2 3 4 5 6 7 8 9 10 repositories { maven { url \u0026#39;https://maven.aliyun.com/repository/public/\u0026#39; } maven { url \u0026#39;https://maven.aliyun.com/repository/spring/\u0026#39; } mavenLocal() mavenCentral() } 针对全局项目 在GRADLE_HOME/init.d/目录下新建文件：init.gradle\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 allprojects { repositories { mavenLocal() maven { url \u0026#39;https://maven.aliyun.com/repository/public/\u0026#39; } maven { url \u0026#39;https://maven.aliyun.com/repository/spring/\u0026#39;} maven { url \u0026#39;https://maven.aliyun.com/repository/google/\u0026#39;} maven { url \u0026#39;https://maven.aliyun.com/repository/gradle-plugin/\u0026#39;} maven { url \u0026#39;https://maven.aliyun.com/repository/spring-plugin/\u0026#39;} maven { url \u0026#39;https://maven.aliyun.com/repository/grails-core/\u0026#39;} maven { url \u0026#39;https://maven.aliyun.com/repository/apache-snapshots/\u0026#39;} mavenCentral() } } ","permalink":"https://Kyle-Derrick.github.io/zh/posts/tech/java/maven_gradle_mirror/","summary":"\u003ch1 id=\"maven国内源配置\"\u003eMaven国内源配置\u003c/h1\u003e\n\u003ch2 id=\"修改maven中的配置文件\"\u003e修改Maven中的配置文件。\u003c/h2\u003e\n\u003cp\u003e进入Mavne的安装路径也就是解压路径，例如\u003ccode\u003eD:\\apache-maven-3.5.4\\conf\u003c/code\u003e。修改\u003ccode\u003eD:\\apache-maven-3.5.4\\conf\u003c/code\u003e下的\u003ccode\u003esettings.xml\u003c/code\u003e文件\u003c/p\u003e","title":"Maven、Gradle国内源配置"},{"content":"hugo图片引入问题 我在使用hugo写笔记的时候遇到了插入图片出现链接失效问题，因为在hugo中 xxx.md 生成html后会生成 xxx 目录，然后再 xxx 目录下生成 index.html ，因此编写md时的图片引用路径在生成html后边的不可用了；\n网上查到的解决方法有两种：\n图片放入 /static 目录下，然后通过绝对路径引入 将 xxx.md 调整为 xxx/index.md 然后使用相对路径引用图片 但是：方法一需要把所有图片放到 /static 下，需要单独维护；方法二会导致出现大量目录和 index.md 文件，目录就会非常乱。\n故而想了一种办法：通过修改md生成html时图片渲染处理逻辑，以支持相对路径图片引用\n修改 render_image.html (/layouts/_default/_markup/render_image.html)\n默认可能没有，我的是从 PaperMod 主题里复制的\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 {{- $u := urls.Parse .Destination -}} {{- $src := $u.String -}} {{- if not $u.IsAbs -}} {{- $path := strings.TrimPrefix \u0026#34;./\u0026#34; $u.Path }} {{- with or (.PageInner.Resources.Get $path) (resources.Get $path) -}} {{- $src = .RelPermalink -}} {{- with $u.RawQuery -}} {{- $src = printf \u0026#34;%s?%s\u0026#34; $src . -}} {{- end -}} {{- with $u.Fragment -}} {{- $src = printf \u0026#34;%s#%s\u0026#34; $src . -}} {{- end -}} {{/* 新增逻辑：非 index.md 的本地相对路径添加 ../ */}} {{- else -}} {{- if and (not (hasPrefix $u.Path \u0026#34;/\u0026#34;)) (ne .PageInner.File.LogicalName \u0026#34;index.md\u0026#34;) -}} {{- $src = printf \u0026#34;../%s\u0026#34; $path -}} {{- end -}} {{- end -}} {{- 一直到这里 -}} {{- end -}} {{- $attributes := merge .Attributes (dict \u0026#34;alt\u0026#34; .Text \u0026#34;src\u0026#34; $src \u0026#34;title\u0026#34; (.Title | transform.HTMLEscape) \u0026#34;loading\u0026#34; \u0026#34;lazy\u0026#34;) -}} \u0026lt;img {{- range $k, $v := $attributes -}} {{- if $v -}} {{- printf \u0026#34; %s=%q\u0026#34; $k $v | safeHTMLAttr -}} {{- end -}} {{- end -}}\u0026gt; {{- /**/ -}} 这样你就可以直接在 xxx.md 中直接使用 img/xxx_1.1.png 引入图片了\n","permalink":"https://Kyle-Derrick.github.io/zh/posts/tech/other_general/hugo/hugo_include_image/","summary":"\u003ch1 id=\"hugo图片引入问题\"\u003ehugo图片引入问题\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e我在使用hugo写笔记的时候遇到了插入图片出现链接失效问题，因为在hugo中 xxx.md 生成html后会生成 xxx 目录，然后再 xxx 目录下生成 index.html ，因此编写md时的图片引用路径在生成html后边的不可用了；\u003c/p\u003e","title":"hugo从同级目录下插入图片（相对路径）"},{"content":"杂项记录点 1. 命令 编写时可启动 server 随时观察实际显示效果： 1 hugo server 编译 1 hugo --gc --minify --cleanDestinationDir 2. md开头的参数 date\n• 文章发布日期，格式为 YYYY-MM-DDTHH:mm:ss+08:00（ISO 8601）。\n• 用途：决定文章在时间轴中的位置，影响排序和归档路径。\n• 示例：date: 2025-07-21T14:30:00+08:00\ndraft\n• 布尔值（true/false），标记是否为草稿。\n• 用途：若为 true，默认情况下 hugo 命令不会生成该文章，需添加 \u0026ndash;buildDrafts 参数才能编译。\n• 示例：draft: true\ndescription\n• 文章摘要或描述，通常用于 SEO 和列表页预览。\n• 示例：description: \u0026ldquo;Hugo Front Matter 参数详解\u0026rdquo;\nauthor\n• 指定作者姓名，可在模板中调用显示。\n• 示例：author: \u0026ldquo;Your Name\u0026rdquo;\nimage\n• 文章封面或特色图片路径（支持本地或外部 URL）。\n• 示例：image: \u0026ldquo;/images/featured.jpg\u0026rdquo;\nsummary\n• 手动指定文章摘要，覆盖自动生成的摘要。\n• 示例：summary: \u0026ldquo;本文详细解析 Hugo Front Matter 的所有参数\u0026rdquo;\ntoc\n• 布尔值（true/false），控制是否生成目录（Table of Contents）。\n• 示例：toc: true\nweight\n• 数值，控制文章在列表中的排序权重（数值越小越靠前）。\n• 示例：weight: 10\nhiddenFromHomePage / hiddenFromSearch\n• 布尔值，控制文章是否在首页或搜索结果中隐藏。\n• 示例：hiddenFromHomePage: true\nmath\n• 布尔值，启用数学公式支持（需主题兼容 LaTeX）。\n• 示例：math: true\nlightgallery\n• 布尔值，启用图片灯箱效果（依赖主题实现）。\n• 示例：lightgallery: true\naliases\n• 数组，设置文章别名（旧 URL 重定向）。\n• 示例：\naliases:\n\u0026ldquo;/old-path/post.html\u0026rdquo; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} lastmod: {{ .Date }} author: [\u0026#34;AInfinity\u0026#34;] categories: - category 1 - category 2 tags: - tag 1 - tag 2 keywords: - word 1 - word 2 description: \u0026#34;\u0026#34; # 文章描述，与搜索优化相关 summary: \u0026#34;\u0026#34; # 文章简单描述，会展示在主页 weight: # 输入1可以顶置文章，用来给文章展示排序，不填就默认按时间排序 slug: \u0026#34;\u0026#34; draft: false # 是否为草稿 comments: true showToc: true # 显示目录 TocOpen: true # 自动展开目录 autonumbering: true # 目录自动编号 hidemeta: false # 是否隐藏文章的元信息，如发布日期、作者等 disableShare: true # 底部不显示分享栏 searchHidden: false # 该页面可以被搜索到 showbreadcrumbs: true #顶部显示当前路径 mermaid: true cover: image: \u0026#34;\u0026#34; caption: \u0026#34;\u0026#34; alt: \u0026#34;\u0026#34; relative: false ","permalink":"https://Kyle-Derrick.github.io/zh/posts/tech/other_general/hugo/hugo_exp_note/","summary":"hugo使用过程中的一些经验记录","title":"hugo使用经验"},{"content":"","permalink":"https://Kyle-Derrick.github.io/zh/posts/tech/other_general/hugo/hugo_giscus_comment/","summary":"","title":"hugo使用Giscus支持评论"},{"content":"settings.json 配置 通过添加 .vscode/settings.json 来配置 vscode ， 比如使 Markdown 支持代码片段和提示：\n1 2 3 4 5 6 7 8 9 { \u0026#34;[markdown]\u0026#34;: { \u0026#34;editor.quickSuggestions\u0026#34;: { \u0026#34;other\u0026#34;: true, // 允许代码片段在非注释/字符串区域触发 \u0026#34;comments\u0026#34;: false, \u0026#34;strings\u0026#34;: false } } } *.code-snippets 代码片段 通过添加 .vscode/xxx.code-snippets 来添加自定义代码片段：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \u0026#34;Hugo Title\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;hugo\u0026#34;, // 触发词，如输入\u0026#34;time\u0026#34;后按Tab \u0026#34;body\u0026#34;: [ \u0026#34;---\u0026#34;, \u0026#34;title: \u0026#39;标题\u0026#39;\u0026#34;, \u0026#34;author: [\u0026#39;kyle\u0026#39;]\u0026#34;, \u0026#34;summary: \u0026#39;简单描述\u0026#39;\u0026#34;, \u0026#34;date: \u0026#39;${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}T${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}+08:00\u0026#39;\u0026#34;, \u0026#34;draft: true\u0026#34;, \u0026#34;---\u0026#34;, \u0026#34;\u0026#34; ], \u0026#34;description\u0026#34;: \u0026#34;hugo md 开头配置\u0026#34; } } ","permalink":"https://Kyle-Derrick.github.io/zh/posts/tech/vscode/vscode-project-config/","summary":"[此文为随笔随记]通过对项目下的 .vscode 目录添加配置达到项目级配置的目的，这样就不用每个环境都修改配置了","title":"vscode项目级配置"},{"content":"1. Hugo部分 1.1. 安装Hugo https://github.com/gohugoio/hugo/releases/latest\n根据自己的操作系统下载 hugo_extended_withdeploy_xxx，我这里是Ubuntu，所以下载的 hugo_extended_withdeploy_0.147.3_linux-amd64.deb\n1.2. Hugo创建站点（项目） Hugo 默认配置文件格式是.toml，但.yml格式更易看懂，更好配置，所以我这里使用的yml格式配置文件\n1 hugo new site Kyle-Derrick.github.io -f yml 完事后生成一个Kyle-Derrick.github.io目录，进入目录后是如下结构：\n1 2 3 4 5 6 7 8 9 10 11 Kyle-Derrick.github.io/ ├── archetypes/ │ └── default.md ├── assets/ ├── content/ ├── data/ ├── i18n/ ├── layouts/ ├── static/ ├── themes/ └── hugo.yml \u0026lt;-- site configuration 目录说明：\n文件名称 简要说明 archetypes 该文件夹主要用来存储博客生成的模板文件，初次使用只有一个default.md，可以根据个人的主题配置添加自定义头部信息 assets 该文件夹主要用于保存博客样式css和js文件 content 保存个人博客所有内容 data 保存生成站点时候所需要的配置文件 layouts 以为.html形式存储模板，将你博客内容呈现为静态页面 static 存储所有静态内容：图片、.css、.js等，当使用 Hugo 生成静态页面时，所有内容将会被复制 resources 缓存一些文件来加速站点生成 themes 保存主题 config.yml 个人博客主题样式配置文件 引入 PaperMod 主题项目 1 2 3 git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive 1.3. 编辑 config.yml 文件 可以参考官方的进行修改：https://github.com/adityatelange/hugo-PaperMod/wiki/Installation#sample-hugoyml\n我这里根据网上找的案例然后简单改了改：\n注意里边的 publishDir: \u0026quot;docs\u0026quot; 后边Github Pages时有用\nbaseURL: https://Kyle-Derrick.github.io # 绑定的域名 title: Kyle\u0026#39;s Notebook publishDir: \u0026#34;docs\u0026#34; # paginate: 10 # 首页每页显示的文章数 theme: PaperMod # 主题名称，和themes文件夹下的一致 languageCode: zh-cn # en-us # 网站默认语言为简体中文 pagination: pagerSize: 10 # 控制每页显示数量 path: \u0026#34;page/\u0026#34; # 可选：分页路径格式 hasCJKLanguage: true # 自动检测是否包含中文日文韩文,如果文章中使用了很多中文引号的话可以开启（解决中文引号排版问题） enableInlineShortcodes: true # 允许行内短代码 enableEmoji: true # 允许使用 Emoji 表情，建议 true enableRobotsTXT: true # 生成 robots.txt 文件 buildDrafts: false # 不构建草稿文章 buildFuture: false # 不构建未来日期的文章 buildExpired: false # 不构建已过期的文章 pygmentsUseClasses: true # 使用 CSS 类而非内联样式（代码高亮） # googleAnalytics: UA-123-45 minify: disableXML: true # 禁用 XML 压缩 # minifyOutput: true permalinks: post: \u0026#34;/:title/\u0026#34; # post: \u0026#34;/:year/:month/:day/:title/\u0026#34; defaultContentLanguage: zh # 最顶部首先展示的语言页面 defaultContentLanguageInSubdir: true # 每种语言生成独立子目录（如 /zh/） languages: zh: languageName: \u0026#34;Chinese\u0026#34; # 显示在语言切换器中的名称 # contentDir: content/english weight: 1 # 权重最高（默认语言） outputs: home: - HTML - RSS # 生成 RSS 订阅源 - JSON # 生成 JSON Feed menu: main: - identifier: search name: 搜索 url: search weight: 1 - identifier: home name: 主页 url: / weight: 2 - identifier: posts name: 文章 url: /posts weight: 3 - identifier: archives name: 时间轴 url: archives weight: 20 # - identifier: categories # name: 🧩分类 # url: categories # weight: 30 - identifier: tags name: 标签 url: /tags weight: 40 - identifier: about name: 关于 url: /about weight: 50 # - identifier: links # name: 🤝友链 # url: links # weight: 60 params: env: production # to enable google analytics, opengraph, twitter-cards and schema. description: \u0026#34;这是一个纯粹的博客......\u0026#34; author: Shaohan Tian author: \u0026#34;Me\u0026#34; # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authors defaultTheme: auto # 自动切换深色/浅色模式 disableThemeToggle: false # 允许用户手动切换主题 DateFormat: \u0026#34;2006-01-02\u0026#34; ShowShareButtons: true ShowReadingTime: true # disableSpecialistPost: true displayFullLangName: true ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: true # 显示代码复制按钮 hideFooter: false # 隐藏页脚 ShowWordCounts: true VisitCount: true ShowLastMod: true #显示文章更新时间 ShowToc: true # 显示目录 TocOpen: true # 自动展开目录 comments: true # 个人资料模块配置 profileMode: enabled: true title: 平平无奇的记忆碎片收纳墙 # 个人简介标题 subtitle: \u0026#34;欢迎光临寒舍\u0026#34; # 带 HTML 格式的副标题 # imageUrl: \u0026#34;img/logo.gif\u0026#34; # 头像图片路径 # imageTitle: # imageWidth: 150 # imageHeight: 150 buttons: # 导航按钮 - name: 技术 url: posts/tech - name: 阅读 url: posts/read - name: 生活 url: posts/life socialIcons: # 社交图标链接 - name: github url: \u0026#34;https://github.com/Kyle-Derrick\u0026#34; # - name: twitter # url: \u0026#34;img/twitter.png\u0026#34; # - name: bilibili # url: \u0026#34;https://space.bilibili.com/395280439\u0026#34; # - name: QQ # url: \u0026#34;img/qq.jpg\u0026#34; # - name: email # url: \u0026#34;mailto:shaohan.tian@foxmail.com\u0026#34; - name: RSS url: \u0026#34;index.xml\u0026#34; # - name: facebook # url: \u0026#34;https://www.facebook.com/profile.php?id=100027782410997\u0026#34; # - name: instagram # url: \u0026#34;img/instagram.png\u0026#34; # - name: QQ # url: \u0026#34;img/qq.png\u0026#34; # - name: Phone # url: \u0026#34;img/phone.png\u0026#34; # editPost: # URL: \u0026#34;https://github.com/adityatelange/hugo-PaperMod/tree/exampleSite/content\u0026#34; # Text: \u0026#34;Suggest Changes\u0026#34; # edit text # appendFilePath: true # to append file path to Edit link # label: # text: \u0026#34;Home\u0026#34; # icon: icon.png # iconHeight: 35 # analytics: # google: # SiteVerificationTag: \u0026#34;XYZabc\u0026#34; assets: favicon: \u0026#34;img/favicon.ico\u0026#34; favicon16x16: \u0026#34;img/favicon-16x16.ico\u0026#34; favicon32x32: \u0026#34;img/favicon-32x32.ico\u0026#34; apple_touch_icon: \u0026#34;img/apple-touch-icon.png\u0026#34; safari_pinned_tab: \u0026#34;img/favicon.ico\u0026#34; # cover: # hidden: true # hide everywhere but not in structured data # hiddenInList: true # hide on list pages and home # hiddenInSingle: true # hide on single page fuseOpts: # 搜索功能配置 isCaseSensitive: false # 不区分大小写 shouldSort: true location: 0 distance: 1000 threshold: 1 # 搜索敏感度 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;] twikoo: version: 1.4.11 taxonomies: category: categories # 分类系统使用 /categories/ 路径 tag: tags # 标签系统使用 /tags/ 路径 series: series # 系列文章使用 /series/ 路径 markup: goldmark: renderer: unsafe: true # HUGO 默认转义 Markdown 文件中的 HTML 代码，如需开启的话 highlight: # anchorLineNos: true codeFences: true guessSyntax: true lineNos: true # 显示行号 # noClasses: false # style: monokai style: darcula # 代码高亮主题为 Darcula # codeFences：代码围栏功能，这个功能一般都要设为 true 的，不然很难看，就是干巴巴的-代码文字，没有颜色。 # guessSyntax：猜测语法，这个功能建议设置为 true, 如果你没有设置要显示的语言则会自动匹配。 # hl_Lines：高亮的行号，一般这个不设置，因为每个代码块我们可能希望让高亮的地方不一样。 # lineNoStart：行号从编号几开始，一般从 1 开始。 # lineNos：是否显示行号，我比较喜欢显示，所以我设置的为 true. # lineNumbersInTable：使用表来格式化行号和代码,而不是 标签。这个属性一般设置为 true. # noClasses：使用 class 标签，而不是内嵌的内联样式 privacy: # 隐私相关设置 vimeo: disabled: false simple: true x: disabled: false enableDNT: true simple: true instagram: disabled: false simple: true youtube: disabled: false privacyEnhanced: true # 启用 YouTube 隐私增强模式 services: instagram: disableInlineCSS: true x: disableInlineCSS: true 1.4. 添加搜索页面 添加以下配置到 config.yml 文件（上述配置文件已有，此处不用重复添加）\n1 2 3 4 5 outputs: home: - HTML - RSS - JSON # is necessary 在content文件夹中创建search.md并添加以下配置：\n1 2 3 4 5 6 --- title: \u0026#34;搜索\u0026#34; # in any language you want layout: \u0026#34;search\u0026#34; # is necessary summary: \u0026#34;search\u0026#34; placeholder: \u0026#34;搜索框内的默认显示\u0026#34; --- 要使得某些特定的不被搜素到，可以在博客开头添加：\n1 searchHidden: true 1.5. 配置时间轴页面 在content文件夹中创建archive.md并添加以下配置：\n1 2 3 4 5 6 --- title: \u0026#34;时间轴\u0026#34; layout: \u0026#34;archives\u0026#34; url: \u0026#34;/archives/\u0026#34; summary: archives --- 1.6. 配置标签页面 1.6.1 修改默认翻译 在项目根目录新建i18n/文件夹，复制themes/PaperMod/i18n/zh.yaml到i18n/zh.yaml\n1.6.2 修改 html 模板 标签页对应的模板文件为themes/PaperMod/layouts/_default/terms.html，同以上步骤：在网站根目录新建layouts/_default/文件夹，复制themes/PaperMod/layouts/_default/terms.html到layouts/_default/terms.html，并编辑（主要添加标签那几行）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 {{- define \u0026#34;main\u0026#34; }} {{- if .Title }} \u0026lt;header class=\u0026#34;page-header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{- if eq .Title \u0026#34;Tags\u0026#34; }} \u0026lt;h1\u0026gt;{{ \u0026#34;标签\u0026#34; }}\u0026lt;/h1\u0026gt; \u0026lt;!-- \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; --\u0026gt; {{- end }} {{- if .Description }} \u0026lt;div class=\u0026#34;post-description\u0026#34;\u0026gt; {{ .Description }} \u0026lt;/div\u0026gt; {{- end }} \u0026lt;/header\u0026gt; {{- end }} \u0026lt;ul class=\u0026#34;terms-tags\u0026#34;\u0026gt; {{- $type := .Type }} {{- range $key, $value := .Data.Terms.Alphabetical }} {{- $name := .Name }} {{- $count := .Count }} {{- with site.GetPage (printf \u0026#34;/%s/%s\u0026#34; $type $name) }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Name }} \u0026lt;sup\u0026gt;\u0026lt;strong\u0026gt;\u0026lt;sup\u0026gt;{{ $count }}\u0026lt;/sup\u0026gt;\u0026lt;/strong\u0026gt;\u0026lt;/sup\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{- end }} {{- end }} \u0026lt;/ul\u0026gt; {{- end }}{{/* end main */ -}} 1.7. 配置关于页面 根据定义好的模板，在此利用该模板生成关于页面，根目录执行执行命令：\n1 hugo new --kind post content/about.md 1.8. 内容管理 我们写作的内容都是放在content目录下的，因此有必要对其内容有一个基本了解 在官方文档 Content Management 中详尽地介绍了管理博客内容需要了解的所有信息，以下是我的一个目录结构，其中的 about.md、 archive.md 和 search.md 对应博客中的关于、时间轴和搜索：\n1 2 3 4 5 6 7 8 9 10 11 12 content ├── posts │ ├── _index.md │ ├── life │ │ └── _index.md │ ├── read │ │ └── _index.md │ └── tech │ └── _index.md ├── about.md ├── archive.md └── search.md 以上目录结构看到出现了很多_index.md,官方参考文档在此Index Pages 。简而言之，这个文件是作为自定义索引页存在。这里给出我使用的一个_index.md作为参考：\n1 2 3 4 5 6 7 8 --- title: \u0026#34;文章\u0026#34; # description: \u0026#34;文章。\u0026#34; hidemeta: true # 是否隐藏文章的元信息，如发布日期、作者等 --- 杂七杂八的文章。 \u0026lt;!-- more --\u0026gt; 注意：根据个人博客具体分类将其生成到对应路径。\n2. Github Pages部分 2.1. 新建Github仓库 注意仓库名一定是 用户名.github.io 的形式\n2.2. 新增Github Actions 在hugo根目录新增 .github\\workflows\\deploy-hugo-and-pages.yml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 # Simple workflow for deploying static content to GitHub Pages name: Deploy Hugo And Github Pages on: # Runs on pushes targeting the default branch push: branches: [\u0026#34;master\u0026#34;] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: write pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false jobs: # Single deploy job since we\u0026#39;re just deploying deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: submodules: true fetch-depth: 0 persist-credentials: true - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build Web run: hugo --gc --minify --cleanDestinationDir - name: Commit artifacts run: | git config --global user.name \u0026#34;GitHub Actions Bot\u0026#34; git config --global user.email \u0026#34;github-actions@example.com\u0026#34; git add ./docs git commit -m \u0026#34;chore: Auto-commit build artifacts [skip ci]\u0026#34; || echo \u0026#34;No changes to commit\u0026#34; git push origin HEAD:master env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # - name: Checkout # uses: actions/checkout@v4 - name: Setup Pages uses: actions/configure-pages@v5 - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: # Upload entire repository path: \u0026#39;./docs\u0026#39; - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 2.3. 配置GitHub Pages设置 配置 Build and deployment 下的 Source 为 GitHub Actions\n完成\n","permalink":"https://Kyle-Derrick.github.io/zh/posts/tech/other_general/hugo/hugo_and_github_pages/","summary":"\u003ch1 id=\"1-hugo部分\"\u003e1. Hugo部分\u003c/h1\u003e\n\u003ch2 id=\"11-安装hugo\"\u003e1.1. 安装Hugo\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/gohugoio/hugo/releases/latest\"\u003ehttps://github.com/gohugoio/hugo/releases/latest\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e根据自己的操作系统下载 hugo_extended_withdeploy_xxx，我这里是Ubuntu，所以下载的 hugo_extended_withdeploy_0.147.3_linux-amd64.deb\u003c/p\u003e","title":"Hugo使用PaperMod主题搭建博客，并配置自动发布Github Pages"},{"content":" 我是 Kyle，一名热爱技术分享的开发者。此站点为日常研究或学习过程中的一些记录点（或者说笔记），主要研究方向：\nRust Golang Java Python C 机器学习\n欢迎大家一起交流学习！\n","permalink":"https://Kyle-Derrick.github.io/zh/about/","summary":"关于 Kyle\u0026rsquo;s Notebook","title":"关于我"}]